<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Implementation of the field storage API for Edoweb Storage.
 */

/**
* Implement hook_menu().
* Settings for edoweb_storage are configured here.
*/
function edoweb_storage_menu() {
  $items = array();
  $items['edoweb/config/storage'] = array(
    'title' => 'APIs',
    'description' => 'Configuration for the regal storage module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_storage_configuration_form'),
    'access arguments' => array('administer edoweb configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['edoweb/config/accounts'] = array(
    'title' => 'Accounts',
    'description' => 'Configuration for the regal API accounts.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_account_configuration_form'),
    'access arguments' => array('administer edoweb configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

 return $items;
}

/**
* Create and display the configuration settings form.
*/
function edoweb_storage_configuration_form($form, &$form_state) {

  $form = array();

  // Text field for api host.
  $form['edoweb_api_host'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_api_host',
      'http://api.localhost'
    ),
    '#title' => t('API host'),
    '#description' => t('The hostname or IP address of the API'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for elasticsearch.
  $form['es_api_host'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'es_api_host',
      'http://api.localhost/search'
    ),
    '#title' => t('Elasticsearch'),
    '#description' => t('The hostname or IP address of the Elasticsearch'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for api namespace.
  $form['edoweb_api_namespace'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_api_namespace',
      'edoweb'
    ),
    '#title' => t('Namespace'),
    '#description' => t('The namespace of the primary resources.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for lobid api host.
  $form['edoweb_lobid_host'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_lobid_host',
      'http://lobid.org'
    ),
    '#title' => t('lobid API host'),
    '#description' => t('The hostname or IP address of the lobid API'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for thumby URL.
  $form['edoweb_thumby_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_thumby_url',
      variable_get('edoweb_api_host') . '/tools/thumby'
    ),
    '#title' => t('Thumby URL'),
    '#description' => t('The full URL to a thumby thumbnailer service'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => FALSE,
  );
  
  $form['edoweb_zettel_url'] = array(
  		'#type' => 'textfield',
  		'#default_value' => variable_get(
  				'edoweb_zettel_url',
  				variable_get('edoweb_api_host') . '/tools/forms'
  				),
  		'#title' => t('Zettel URL'),
  		'#description' => t('The full URL to a zettel form service'),
  		'#size' => 40,
  		'#maxlength' => 120,
  		'#required' => FALSE,
  );

 // Text field for deepviewer URL.
  $form['edoweb_deepzoom_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_deepzoom_url',
      variable_get('edoweb_api_host') . '/deepzoom/api/getDZi'
    ),
    '#title' => t('Deepzoom Image Renderer URL'),
    '#description' => t('The full URL to a Deepzoom Image Renderer service'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => FALSE,
  );

  // Text field for deepviewer URL.
  $form['edoweb_forms_url'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get(
          'edoweb_forms_url',
          variable_get('edoweb_api_host') . '/ktbldata'
          ),
      '#title' => t('ktbl Data Form URL'),
      '#description' => t('The full URL to the new forms service'),
      '#size' => 40,
      '#maxlength' => 120,
      '#required' => FALSE,
  );
  
  return system_settings_form($form);
}

function edoweb_account_configuration_form($form, &$form_state) {

  $form = array();

  // Text field for api admin user.
  $form['edoweb_admin_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_admin_user',
      'edoweb-admin'
    ),
    '#title' => t('API admin user'),
    '#description' => t('The username to authorize with for the admin role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Password field for api admin password.
  $form['edoweb_admin_password'] = array(
    '#type' => 'password',
    '#default_value' => variable_get(
      'edoweb_admin_password',
      'admin'
    ),
    '#title' => t('API admin password'),
    '#description' => t('The password to authorize with for the admin role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for api editor user.
  $form['edoweb_editor_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_editor_user',
      'edoweb-editor'
    ),
    '#title' => t('API editor user'),
    '#description' => t('The username to authorize with for the editor role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Password field for api editor password.
  $form['edoweb_editor_password'] = array(
    '#type' => 'password',
    '#default_value' => variable_get(
      'edoweb_editor_password',
      'editor'
    ),
    '#title' => t('API editor password'),
    '#description' => t('The password to authorize with for the editor role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for api reader user.
  $form['edoweb_reader_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_reader_user',
      'edoweb-reader'
    ),
    '#title' => t('API reader user'),
    '#description' => t('The username to authorize with for the reader role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Password field for api reader password.
  $form['edoweb_reader_password'] = array(
    '#type' => 'password',
    '#default_value' => variable_get(
      'edoweb_reader_password',
      'reader'
    ),
    '#title' => t('API reader password'),
    '#description' => t('The password to authorize with for the reader role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for api subscriber user.
  $form['edoweb_subscriber_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_subscriber_user',
      'edoweb-subscriber'
    ),
    '#title' => t('API subscriber user'),
    '#description' => t('The username to authorize with for the subscriber role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Password field for api subscriber password.
  $form['edoweb_subscriber_password'] = array(
    '#type' => 'password',
    '#default_value' => variable_get(
      'edoweb_subscriber_password',
      'subscriber'
    ),
    '#title' => t('API subscriber password'),
    '#description' => t('The password to authorize with for the subscriber role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for api remote user.
  $form['edoweb_remote_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_remote_user',
      'edoweb-remote'
    ),
    '#title' => t('API remote user'),
    '#description' => t('The username to authorize with for the remote role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Password field for api remote password.
  $form['edoweb_remote_password'] = array(
    '#type' => 'password',
    '#default_value' => variable_get(
      'edoweb_remote_password',
      'remote'
    ),
    '#title' => t('API remote password'),
    '#description' => t('The password to authorize with for the remote role.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for etikett user.
  $form['edoweb_etikett_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_etikett_user',
      'etikett'
    ),
    '#title' => t('Etikett user'),
    '#description' => t('The username to authorize with for etikett.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Password field for etikett password.
  $form['edoweb_etikett_password'] = array(
    '#type' => 'password',
    '#default_value' => variable_get(
      'edoweb_etikett_password',
      'etikett'
    ),
    '#title' => t('Etikett password'),
    '#description' => t('The password to authorize with for etikett.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  return system_settings_form($form);

}

/**
 * Implements hook_field_storage_info().
 */
function edoweb_storage_field_storage_info() {
  return array(
    'edoweb_storage' => array(
      'label' => t('Edoweb Storage field storage'),
      'description' => t('Stores nodes and fields in a Edoweb Storage database.'),
    ),
  );
}

/**
 * Implements hook_field_storage_details().
 */
function edoweb_storage_field_storage_details($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_create_field().
 */
function edoweb_storage_field_storage_create_field($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_update_field().
 */
function edoweb_storage_field_storage_update_field($field, $prior_field, $has_data) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_delete_field().
 */
function edoweb_storage_field_storage_delete_field($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_load().
 */
function edoweb_storage_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_write().
 */
function edoweb_storage_field_storage_write($entity_type, $entity, $op, $fields, $entity_write = FALSE) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}


/**
 * Implement hook_field_storage_delete().
 *
 */
function edoweb_storage_field_storage_delete($entity_type, $entity, $fields) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implement hook_field_storage_delete_revision().
 *
 */
function edoweb_storage_field_storage_delete_revision($entity_type, $entity, $fields) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implement hook_field_storage_delete_instance().
 *
 */
function edoweb_storage_field_storage_delete_instance($instance) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

class EdowebStorageException extends Exception {}

/**
 * Implements hook_entity_query_alter().
 *
 * Alter the entity info.
 */
function edoweb_storage_entity_query_alter($query) {
  if (isset($query->tags['elasticsearch'])
      || isset($query->tags['lobid'])
  ) {
    $query->executeCallback = '_edoweb_storage_query';
  }
}

function _edoweb_storage_query($query) {
  $api = new EdowebAPIClient();
  return $api->query($query);
}

/**
 * Implements hook_field_storage_query().
 *
 */
function edoweb_storage_field_storage_query($query) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_attach_rename_bundle().
 */
function edoweb_storage_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_insert().
 */
function edoweb_storage_entity_insert($entity, $entity_type) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_update().
 */
function edoweb_storage_entity_update($entity, $entity_type) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_attach_delete.
 */
function edoweb_storage_field_attach_delete($entity_type, $entity) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_info_alter().
 */
function edoweb_storage_entity_info_alter(&$entity_info) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

function __devnulldb_log($message, $target='php://stderr') {
  //file_put_contents($target, $message);
}

/*************************
 * Edoweb helper functions
 *************************/

define('EDOWEB_ENTITY_TYPE', 'edoweb_basic');

function _edoweb_storage_entity_serialize_turtle(
  $entity, $metadata_types = array()
){
  $rdf_serializer = new LibRDF_Serializer('turtle');
  return _edoweb_storage_entity_serialize_rdf(
    $entity, $rdf_serializer, $metadata_types
  );
}

function _edoweb_storage_entity_serialize_ntriples(
  $entity, $metadata_types = array()
){
  $rdf_serializer = new LibRDF_Serializer('ntriples');
  return _edoweb_storage_entity_serialize_rdf(
    $entity, $rdf_serializer, $metadata_types
  );
}

function _edoweb_storage_entity_serialize_rdf(
  $entity, $rdf_serializer = false, $metadata_types = array()
){
  $rdf_model = new LibRDF_Model(new LibRDF_Storage());
  $rdf_mapping = rdf_mapping_load(
    EDOWEB_ENTITY_TYPE, $entity->bundle_type
  );
  if (empty($rdf_mapping)) {
    return $rdf_model;
  }
  // First element contains the rd_rdf:type definitions
  $rdf_type_predicate = new LibRDF_URINode(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'
  );
  $rdf_subject = new LibRDF_URINode($entity->identifier());
  foreach (array_shift($rdf_mapping) as $rdf_type_mapping) {
    $rdf_type_statement = new LibRDF_Statement(
      $rdf_subject, $rdf_type_predicate,
      new LibRDF_URINode(_edoweb_expand_curie($rdf_type_mapping))
    );
    $rdf_model->addStatement($rdf_type_statement);
  }

  $wrapper = entity_metadata_wrapper(EDOWEB_ENTITY_TYPE, $entity);

  if(!empty($entity->postData) && ($entity->type == 'researchData' ||$entity->type == 'article')){
	$rdfxml_parser = new LibRDF_Parser('rdfxml');
        $rdf_model = new LibRDF_Model(new LibRDF_Storage());
        $rdf_serializer = new LibRDF_Serializer('ntriples');
        try {
            $rdf_model->loadStatementsFromString($rdfxml_parser, 
                    $entity->postData);
            return $rdf_model->serializeStatements($rdf_serializer);
        } catch (LibRDF_Error $e) {
            drupal_set_message("Problems to serialize rdf " . $e);
        }
  }

  // Following elements contain predicate mappings
  foreach ($rdf_mapping as $field_name => $field_mapping) {
    $field_info = field_info_field($field_name);

    $handler_settings = array_key_exists(
      'handler_settings', $field_info['settings']
    ) ? $field_info['settings']['handler_settings']
      : false;

    $embedded_storage = $handler_settings && array_key_exists(
      'embedded_storage', $handler_settings
    ) ? $handler_settings['embedded_storage']
      : false;

    $metadata_type = $field_info['settings']['metadata_type'];
    if (!empty($metadata_types)
        && !in_array($metadata_type, $metadata_types)) {
      continue;
    }
    foreach ($field_mapping['predicates'] as $predicate_curie) {
      $rdf_predicate = new LibRDF_URINode(
        _edoweb_expand_curie($predicate_curie)
      );
      $rdf_subject = _get_rdf_subject($entity, $field_name);
      try {
        $items = $wrapper->{$field_name}->value();
      } catch (EntityMetadataWrapperException $e) {
        // Field is not available for this entity
        continue;
      }
      if (is_null($items) || empty($items)) {
        // Field is available for this entity,
        // but does not have value(s).
        continue;
      }
      if (!is_array($items)) {
        $items = array($items);
      }
      foreach ($items as $item) {
        if ('' == $item) continue;
        if (isset($field_mapping['type'])
            and $field_mapping['type'] == 'rel') {
          if (is_object($item)) {
            $rdf_object = new LibRDF_URINode($item->identifier());
            if ($embedded_storage) {
              $embedded_item_graph = _edoweb_storage_entity_serialize_rdf(
                $item, false, $metadata_types
              );
              foreach ($embedded_item_graph as $embedded_item_statement) {
                $rdf_model->addStatement($embedded_item_statement);
              }
            }
          } else {
            if (!is_array($item)) {
              $rdf_object = new LibRDF_URINode($item);
            } else if (_is_edoweb_entity($item['value'])) {
              $rdf_object = new LibRDF_URINode($item['value']);
            } else {
              $rdf_object = new LibRDF_URINode(_edoweb_expand_curie($item['value']));
            }
            if ($embedded_storage) {
              $embedded_item_graph = _edoweb_storage_entity_serialize_rdf(
                edoweb_basic_load(_edoweb_compact_uri($item['value'])), false, $metadata_types
              );
              foreach ($embedded_item_graph as $embedded_item_statement) {
                $rdf_model->addStatement($embedded_item_statement);
              }
            }
          }
        } else {
          $rdf_object = new LibRDF_LiteralNode($item);
        }
        $rdf_statement = new LibRDF_Statement(
          $rdf_subject, $rdf_predicate, $rdf_object
        );
        $rdf_model->addStatement($rdf_statement);
      }
    }
  }
  if ($rdf_serializer) {
    foreach (rdf_get_namespaces() as $prefix => $namespace) {
      $rdf_serializer->setNamespace($namespace, $prefix);
    }
    return $rdf_model->serializeStatements($rdf_serializer);
  } else {
    return $rdf_model;
  }
}

function _edoweb_storage_entity_deserialize_rdf($entity, $rdf_model) {
  $rdf_mapping = rdf_mapping_load(
    EDOWEB_ENTITY_TYPE, $entity->bundle_type
  );

  // Skip first element, these are the rd_rdf:type definitions
  unset($rdf_mapping['type']);
  $wrapper = entity_metadata_wrapper(EDOWEB_ENTITY_TYPE, $entity);
  foreach ($rdf_mapping as $field_name => $mapping) {
    $entity->{$field_name} = null;
    $field_info = field_info_field($field_name);
    foreach($mapping['predicates'] as $predicate_curie) {
      $rdf_predicate = new LibRDF_URINode(
        _edoweb_expand_curie($predicate_curie)
      );
      // Modify subject URI for datastream metadata
      $rdf_subject = _get_rdf_subject($entity, $field_name);
      foreach ($rdf_model->getTargets($rdf_subject, $rdf_predicate) as $value) {
        try {
          $list = $rdf_model->getTarget($value,
            new LibRDF_URINode('http://www.w3.org/1999/02/22-rdf-syntax-ns#first')
          );
          foreach ($rdf_model->getListAsArray($value) as $list_value) {
            _entity_set_value($wrapper, $field_info, $list_value, $rdf_model);
          }
        } catch (LibRDF_LookupError $e) {
          _entity_set_value($wrapper, $field_info, $value, $rdf_model);
        }
      }
    }
  }

  // Add non-field properties
  $rdf_subject = new LibRDF_URINode($entity->identifier());
  try {
    $entity->access_data = $rdf_model->getTarget($rdf_subject,
        new LibRDF_URINode(_edoweb_expand_curie('rd_regal:accessScheme'))
    )->getValue();
  } catch (LibRDF_LookupError $e) {
    // No accessScheme available, default to private
    $entity->access_data = variable_get('access_data_default');
  }
  try {
    $entity->access_md = $rdf_model->getTarget($rdf_subject,
        new LibRDF_URINode(_edoweb_expand_curie('rd_regal:publishScheme'))
    )->getValue();
  } catch (LibRDF_LookupError $e) {
    // No publishScheme available, default to public for external and
    // private for edoweb entities
    $entity->access_md = _is_edoweb_entity($entity) ? variable_get('access_md_default') : 'public';
  }

  $rdf_about_subject = new LibRDF_URINode("{$entity->identifier()}.rdf");
  try {
    $entity->updated = strtotime($rdf_model->getTarget(
        $rdf_about_subject,
        new LibRDF_URINode(_edoweb_expand_curie('dc:modified'))
    )->getValue());
  } catch (LibRDF_LookupError $e) {
    //$entity->updated = time();
  }
  try {
    $entity->objectTimestamp = strtotime($rdf_model->getTarget(
        $rdf_about_subject,
        new LibRDF_URINode(_edoweb_expand_curie('rd_regal:objectTimestamp'))
    )->getValue());
  } catch (LibRDF_LookupError $e) {
    //$entity->objectTimestamp = time();
  }
  try {
    $entity->created = strtotime($rdf_model->getTarget(
        $rdf_about_subject,
        new LibRDF_URINode(_edoweb_expand_curie('dc:created'))
    )->getValue());
  } catch (LibRDF_LookupError $e) {
    //$entity->created = time();
  }
  try {
    $entity->uid = $rdf_model->getTarget(
        $rdf_about_subject,
        new LibRDF_URINode(_edoweb_expand_curie('rd_regal:createdBy'))
    )->getValue();
  } catch (LibRDF_LookupError $e) {
    $entity->uid = 0;
  }
  try {
    $entity->mid = $rdf_model->getTarget(
        $rdf_about_subject,
        new LibRDF_URINode(_edoweb_expand_curie('rd_regal:lastModifiedBy'))
    )->getValue();
  } catch (LibRDF_LookupError $e) {
    $entity->mid = $entity->uid;
  }
  try {
    $entity->name = $rdf_model->getTarget(
        $rdf_about_subject,
        new LibRDF_URINode(_edoweb_expand_curie('rd_regal:name'))
    )->getValue();
  } catch (LibRDF_LookupError $e) {
    $entity->name = $entity->remote_id;
  }

}

function _entity_set_value($wrapper, $field_info, $value, $rdf_model) {
  $field_name = $field_info['field_name'];
  // FIXME: wrong datatype of child relations
  if ('field_edoweb_struct_child' == $field_name && !$value instanceof LibRDF_URINode) {
    $value = new LibRDF_URINode($value->getValue());
  }
  // External datasources may provide incompatible data, filter that out
  if (($field_info['type'] == 'edoweb_ld_reference')
      && (!$value instanceof LibRDF_URINode))
        return;
  try {
    if ($value instanceOf LibRDF_LiteralNode) {
      if ($wrapper->{$field_name} instanceOf EntityValueWrapper) {
        $wrapper->{$field_name} = (string) $value->getValue();
      } else {
        $wrapper->{$field_name}[] = (string) $value->getValue();
      }
    } else {
      // Check if SKOS label is available
      try {
        $label = $rdf_model->getTarget($value,
            new LibRDF_URINode(_edoweb_expand_curie('rd_skos:prefLabel'))
        )->getValue();
      } catch (LibRDF_LookupError $e) {
        // If not, check if GND label is available
        try {
          $label = $rdf_model->getTarget($value,
              new LibRDF_URINode(_edoweb_expand_curie('rd_gnd:preferredName'))
          )->getValue();
        } catch (LibRDF_LookupError $e) {
          $label = $value;
        }
      }
      if ($wrapper->{$field_name} instanceOf EntityValueWrapper) {
        $wrapper->{$field_name} = $value->getValue();
      } else if ($wrapper->{$field_name} instanceOf EntityStructureWrapper) {
        $wrapper->{$field_name} = array(
          'value' => $value->getValue(),
          'label' => $label,
        );
      } else if ('text' == $field_info['type']) {
        $wrapper->{$field_name}[] = $label;
      } else {
        $wrapper->{$field_name}[] = array(
          'value' => $value->getValue(),
          'label' => $label,
        );
      }
    }
  } catch (EntityMetadataWrapperException $e) {
    console_log($e->getMessage());
  }
}

function _get_rdf_subject($entity, $field_name) {
  $rdf_subject = $entity->identifier();

  $datastream_properties = array(
    'field_edoweb_filetype',
    'field_edoweb_label',
    'field_edoweb_filesize',
  );

  if (('file' == $entity->bundle_type || 'version' == $entity->bundle_type)
      && in_array($field_name, $datastream_properties)
  ) {
    return new LibRDF_URINode("$rdf_subject/data");
  } else if ('_:' == substr($rdf_subject, 0, 2)) {
    return new LibRDF_BlankNode(substr($rdf_subject, 2));
  } else {
    return new LibRDF_URINode($rdf_subject);
  }

}

function _edoweb_storage_entity_serialize_jsonld(
  $entity, $metadata_types = array()
){
  $rdf_mapping = rdf_mapping_load(
    EDOWEB_ENTITY_TYPE, $entity->bundle_type
  );
  $jsonld_context = new stdClass();
  $rdf_namespaces = rdf_get_namespaces();
  foreach ($rdf_namespaces as $prefix => $uri) {
    $jsonld_context->{$prefix} = $uri;
  }
  $rdf_subject = new LibRDF_URINode($entity->identifier());
  $rdf_serializer = new LibRDF_Serializer('ntriples');
  $rdf_ntriples = _edoweb_storage_entity_serialize_rdf(
    $entity, $rdf_subject, $rdf_serializer, $metadata_types
  );
  try {
    $rdf_jsonld = jsonld_compact(jsonld_from_rdf($rdf_ntriples), $jsonld_context);
  } catch (JsonLdException $e) {
    // drupal_set_message("Error reading ntriples\n$rdf_ntriples");
    $rdf_jsonld = null;
  }
  return str_replace('\\/', '/', json_encode($rdf_jsonld));
}

function _edoweb_storage_entity_deserialize_jsonld($entity, $rdf_data) {
  $options = array();
  $options['format'] = 'application/nquads';
  $rdf_ntriples = jsonld_to_rdf(json_decode($rdf_data), $options);
  $rdf_parser = new LibRDF_Parser('ntriples');
  $rdf_model = new LibRDF_Model(new LibRDF_Storage());
  $rdf_model->loadStatementsFromString($rdf_parser, $rdf_ntriples);
  return _edoweb_storage_entity_deserialize_rdf($entity, $rdf_model);
}

function _edoweb_expand_curie($curie) {
  $rdf_namespaces = rdf_get_namespaces();
  list($curie_prefix, $curie_local) = explode(':', $curie);
  if ($curie_prefix == 'ddc' && '/' != substr($curie, -1)) {
    $curie_local .= '/';
  }
  return isset($rdf_namespaces[$curie_prefix])
    ? $rdf_namespaces[$curie_prefix] . $curie_local
    : $curie;
}

function _edoweb_compact_uri($uri) {
  $rdf_namespaces = rdf_get_namespaces();
  foreach ($rdf_namespaces as $prefix => $rdf_namespace) {
    if (0 === strpos($uri, $rdf_namespace)) {
      return $prefix . ':' . substr($uri, strlen($rdf_namespace));
    }
  }
  return $uri;
}

function _edoweb_bundle_type_from_rdf($remote_id, $rdf_data) {
  // If all fails, resort to generic bundle
  $bundle_type = 'generic';
  try {
    // Regal content-types overrule RDF types
    $bundle_type = (string) $rdf_data->getTarget(
      new LibRDF_URINode($remote_id),
      new LibRDF_URINode('http://hbz-nrw.de/regal#contentType')
    )->getValue();
  } catch (LibRDF_LookupError $e) {
    try {
      // Determine bundle based on RDF type
      $rdf_types = $rdf_data->getTargets(
        new LibRDF_URINode(_edoweb_expand_curie($remote_id)),
        new LibRDF_URINode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type')
      );
      $rdf_type_curies = array();
      foreach ($rdf_types as $rdf_type) {
        $rdf_type_curies[] = _edoweb_compact_uri($rdf_type->getValue());
      }
      foreach (edoweb_rdf_types() as $bundle => $types) {
        foreach ($rdf_type_curies as $rdf_type_curie) {
          if (in_array($rdf_type_curie, $types)) {
            return $bundle;
          }
        }
      }
    } catch (LibRDF_LookupError $e) {
    }
  }
  return $bundle_type;
}

function _field_name_to_jsonld_key($field_name) {
  $field_info = field_info_field($field_name);
  //TODO: Use Drupal's built in RDF mechanism
  $curie = $field_info['settings']['predicates'][0];
  list($prefix, $local) = explode(':', $curie);
  $rdf_namespaces = rdf_get_namespaces();
  $field_property_uri = $rdf_namespaces[$prefix] . $local;
  $context_url = sprintf(
    '%s/context.json',
    variable_get('edoweb_api_host'),
    variable_get('edoweb_api_namespace')
  );
  $context = json_decode(file_get_contents($context_url))->{'@context'};
  foreach ($context as $key => $property) {
    if (is_object($property)) {
      if ('edoweb_ld_reference' == $field_info['type']) {
        $key .= '.prefLabel';
      }
      $property = $property->{'@id'};
    }
    if ($property == $field_property_uri) {
      return $key;
    }
  }
  return $field_name;
}

function _jsonld_key_to_field_name($jsonld_key) {
  $context_url = sprintf(
    '%s/context.json',
    variable_get('edoweb_api_host'),
    variable_get('edoweb_api_namespace')
  );
  $context = json_decode(file_get_contents($context_url))->{'@context'};
  if (is_object($context->$jsonld_key)) {
    $property_uri = $context->$jsonld_key->{'@id'};
  } else {
    $property_uri = $context->$jsonld_key;
  }
  $rdf_namespaces = rdf_get_namespaces();
  foreach (field_info_fields() as $field_name => $field_info) {
    if (!isset($field_info['settings']['predicates'])) continue;
    $curie = $field_info['settings']['predicates'][0];
    list($prefix, $local) = explode(':', $curie);
    $rdf_namespaces = rdf_get_namespaces();
    $field_property_uri = $rdf_namespaces[$prefix] . $local;
    if ($field_property_uri == $property_uri) return $field_name;
  }
  return $jsonld_key;
}

function _is_edoweb_entity($entity) {
  if (is_object($entity)) {
    $remote_id = $entity->remote_id;
  } else {
    $remote_id = $entity;
  }
  $namespace = variable_get('edoweb_api_namespace');
  return ("$namespace:" === substr($remote_id, 0, strlen($namespace) + 1)
      || "rd_template:" === substr($remote_id, 0, 9)
      || "rd_local:" === substr($remote_id, 0, 6)
      || "_:" === substr($remote_id, 0, 2)
  );
}

function _get_api_auth_header() {
  // Fetch credentials from drupal settings
  global $user;
  if (in_array('edoweb_backend_admin', $user->roles)) {
    $api_user = variable_get('edoweb_admin_user');
    $api_pass = variable_get('edoweb_admin_password');
  } else if (in_array('edoweb_backend_user', $user->roles)) {
    $api_user = variable_get('edoweb_editor_user');
    $api_pass = variable_get('edoweb_editor_password');
  } else if (in_array('edoweb_backend_reader', $user->roles)) {
    $api_user = variable_get('edoweb_reader_user');
    $api_pass = variable_get('edoweb_reader_password');
  } else if (in_array('edoweb_backend_subscriber', $user->roles)) {
    $api_user = variable_get('edoweb_subscriber_user');
    $api_pass = variable_get('edoweb_subscriber_password');
  } else if (in_array('edoweb_backend_remote', $user->roles)) {
    $api_user = variable_get('edoweb_remote_user');
    $api_pass = variable_get('edoweb_remote_password');
  } else {
    $api_user = variable_get('edoweb_reader_user');
    $api_pass = variable_get('edoweb_reader_password');
  }
  return 'Basic ' . base64_encode($api_user . ':' . $api_pass);
}
